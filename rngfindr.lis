
AVRASM ver. 1.74  rngfindr.asm Wed Sep 20 22:07:57 2017


         ; ******************************************************
         ; EEET2256 - Intro to Embedded Systems 2017
         ; PING Range Finder Project
         ; by Eric White and Tim Davis
         ;
         ; Diagram:
         ;
         ; SIG pin
         ;
         ;   -->|   |<--tOut
         ;       -->|       |<--tHoldOff
         ;               -->|                    |<--tInMax
         ;               -->|  |<--tInMin
         ;
         ;      |---|       |--------------------|             5V (high)
         ;      |   |       |  .                 |
         ;      |   |       |  .                 |
         ; -----|   |-------|  ..................|----------   0V (low)
         ;
         ; Sonar TX
         ;
         ;          -->|      |<--tBurst
         ;
         ;             ||||||||
         ;             ||||||||
         ;             ||||||||
         ; ------------||||||||---------------------------
         ;
         ; tOut = 5uS
         ; tHoldOff = 750uS
         ; tBurst = 200uS at 40 kHz
         ; tInMin = 115uS
         ; tInMax = 18.5mS
         ; Delay before next measurement 200uS
         ;
         ; Plan:
         ; 1. Microcontroller make the I/O line output (Using DDRx Reg)
         ; 2. The I/O line is made low
         ; 3. Wait for 10uS
         ; 4. Make the I/O line high - tOut
         ; 5. Wait for 5uS - tOut
         ; 6. Make the I/O line low - tHoldOff
         ; 7. Wait for 750uS
         ; 8. Now make I/O line input - for tInx
         ; 9. Wait till the module becomes high to start the timer - tInx
         ; 10. Now we have the time it takes for the wave to hit the obstacle and come back
         ; 11. Use tInx to calculate the distance
         ; 12. Display as LEDs
         ;
         ; Notes:
         ;
         ; Nominal Frequency (MHz) = 1.0
         ; For a 1MHz clock that means 1000000 cycles per second
         ; So, 1 cycle equals 1/1000000 seconds or 1uS
         ;
         ; Lecture notes say 1cm = 29.034uS
         ; ******************************************************
         
         ; for eric's computer
          .include "C:\2_UNI_PROGRAMS\VMLAB\include\m32def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number		        :AVR000
         ;* File Name		    :"m32def.inc"
         ;* Title		        :Register/Bit Definitions for the ATmega32
         ;* Date                 :99.08.25
         ;* Version              :1.00
         ;* Support telephone	:+47 72 88 43 88 (ATMEL Norway)
         ;* Support fax		    :+47 72 88 43 99 (ATMEL Norway)
         ;* Support E-mail	    :avr@atmel.no
         ;* Target MCU		    :ATmega32
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register	
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* In addition, the six registers forming the three data pointers X, Y and
         ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
         ;* SRAM is also defined 
         ;*
         ;* The Register names are represented by their hexadecimal address.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB		;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16		;output to PORTB
         ;*
         ;* in	r16,TIFR		;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0		;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set		;jump if set
         ;* ...				;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device ATmega32
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	SPH	    =$3e
          .equ	SPL	    =$3d
          .equ	OCR0	=$3c
          .equ	GIMSK	=$3b		; For compatibility, keep both names until further
          .equ	GICR	=$3b		; new name for GIMSK
          .equ	GIFR	=$3a
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	SPMCR	=$37
          .equ    TWCR    =$36
          .equ    MCUCR   =$35
          .equ    MCUSR   =$34		; For compatibility, 
          .equ    MCUCSR  =$34		; keep both names until further
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ    OSCCAL  =$31
          .equ    SFIOR   =$30
          .equ	TCCR1A	=$2f
          .equ	TCCR1B	=$2e
          .equ	TCNT1H	=$2d
          .equ	TCNT1L	=$2c
          .equ	OCR1AH	=$2b
          .equ	OCR1AL	=$2a
          .equ	OCR1BH	=$29
          .equ	OCR1BL	=$28
          .equ	ICR1H	=$27
          .equ	ICR1L	=$26
          .equ	TCCR2	=$25
          .equ	TCNT2	=$24
          .equ	OCR2	=$23
          .equ	ASSR	=$22
          .equ	WDTCR	=$21
          .equ    UBRRH   =$20		;  Note! UCSRC equals UBRRH
          .equ	EEARH	=$1f
          .equ	EEARL	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTA	=$1b
          .equ	DDRA	=$1a
          .equ	PINA	=$19
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTC	=$15
          .equ	DDRC	=$14
          .equ	PINC	=$13
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	SPDR	=$0f
          .equ	SPSR	=$0e
          .equ	SPCR	=$0d
          .equ	UDR	    =$0c
          .equ	UCSRA	=$0b
          .equ	UCSRB	=$0a
          .equ	UCSRC	=$20		;  Note! UCSRC equals UBRRH
          .equ	UBRRL	=$09
          .equ	ACSR	=$08
          .equ    ADMUX   =$07
          .equ    ADCSR   =$06
          .equ    ADCH    =$05
          .equ    ADCL    =$04
          .equ    TWDR    =$03
          .equ    TWAR    =$02
          .equ    TWSR    =$01
          .equ    TWBR    =$00
         
         
         
         ;***** Bit Definitions
         ;GIMSK
          .equ	INT1	=7
          .equ	INT0	=6
          .equ	INT2	=5
          .equ	IVSEL	=1		; interrupt vector select
          .equ	IVCE	=0		; interrupt vector change enable
         
         ;GIFR
          .equ	INTF1	=7
          .equ	INTF0	=6
          .equ	INTF2	=5
         
         ;TIMSK
          .equ    TOIE0   =0
          .equ    OCIE0   =1
          .equ    TOIE1   =2
          .equ    OCIE1B  =3
          .equ    OCIE1A  =4
          .equ    TICIE1  =5
          .equ    TOIE2   =6
          .equ    OCIE2   =7
         
         ;TIFR
          .equ    TOV0    =0
          .equ    OCF0    =1
          .equ    TOV1    =2
          .equ    OCF1B   =3
          .equ    OCF1A   =4
          .equ    ICF1    =5
          .equ    TOV2    =6
          .equ    OCF2    =7
         
         ;SPMCR
          .equ	SPMIE	=7
          .equ	ASB	=6
          .equ	ASRE	=4
          .equ	BLBSET	=3
          .equ	PGWRT	=2
          .equ	PGERS	=1
          .equ	SPMEN	=0
         
         ;MCUCR
          .equ    SE      =7
          .equ    SM2     =6
          .equ    SM1     =5
          .equ    SM0     =4
          .equ    ISC11   =3
          .equ    ISC10   =2
          .equ    ISC01   =1
          .equ    ISC00   =0
         
         ;MCUCSR
          .equ	JTD     =7	
          .equ    ISC2    =6
          .equ    EIH     =5
          .equ    JTRF    =4	
          .equ    WDRF    =3
          .equ    BORF    =2
          .equ    EXTRF   =1
          .equ    PORF    =0
         
         ;TCCR0
          .equ    FOC0    =7
          .equ    PWM0    =6
          .equ	COM01	=5
          .equ	COM00	=4
          .equ	CTC0	=3
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
         ;TCCR1A
          .equ	COM1A1	=7
          .equ	COM1A0	=6
          .equ	COM1B1	=5
          .equ	COM1B0	=4
          .equ	FOC1A	=3
          .equ	FOC1B	=2
          .equ	PWM11	=1
          .equ	PWM10	=0
         
         ;TCCR1B
          .equ	ICNC1	=7
          .equ	ICES1	=6
          .equ	CTC11	=4
          .equ	CTC10	=3
          .equ	CTC1	=3		; Obsolete - Included for backward compatibility
          .equ	CS12	=2
          .equ	CS11	=1
          .equ	CS10	=0
         
         ;TCCR2
          .equ	FOC2	=7
          .equ    PWM2    =6
          .equ    COM21   =5
          .equ    COM20   =4
          .equ    CTC2    =3
          .equ    CS22    =2
          .equ    CS21    =1
          .equ    CS20    =0
         
         ;SFIOR
          .equ    RPDD    =7
          .equ    RPDC    =6
          .equ    RPDB    =5
          .equ    RPDA    =4
          .equ    ACME    =3
          .equ    PUD     =2
          .equ	PSR2	=1
          .equ	PSR10	=0
         
         ;WDTCR
          .equ	WDTOE	=4
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
         ;EECR
          .equ    EERIE   =3
          .equ	EEMWE	=2
          .equ	EEWE	=1
          .equ	EERE	=0
         
         ;PORTA
          .equ	PA7	=7
          .equ	PA6	=6
          .equ	PA5	=5
          .equ	PA4	=4
          .equ	PA3	=3
          .equ	PA2	=2
          .equ	PA1	=1
          .equ	PA0	=0
         
         ;DDRA
          .equ	DDA7	=7
          .equ	DDA6	=6
          .equ	DDA5	=5
          .equ	DDA4	=4
          .equ	DDA3	=3
          .equ	DDA2	=2
          .equ	DDA1	=1
          .equ	DDA0	=0
         
         ;PINA
          .equ	PINA7	=7
          .equ	PINA6	=6
          .equ	PINA5	=5
          .equ	PINA4	=4
          .equ	PINA3	=3
          .equ	PINA2	=2
          .equ	PINA1	=1
          .equ	PINA0	=0
         
         ;PORTB
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
         ;DDRB
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
         ;PINB
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
         ;PORTC
          .equ	PC7	=7
          .equ	PC6	=6
          .equ	PC5	=5
          .equ	PC4	=4
          .equ	PC3	=3
          .equ	PC2	=2
          .equ	PC1	=1
          .equ	PC0	=0
         
         ;DDRC
          .equ	DDC7	=7
          .equ	DDC6	=6
          .equ	DDC5	=5
          .equ	DDC4	=4
          .equ	DDC3	=3
          .equ	DDC2	=2
          .equ	DDC1	=1
          .equ	DDC0	=0
         
         ;PINC
          .equ	PINC7	=7
          .equ	PINC6	=6
          .equ	PINC5	=5
          .equ	PINC4	=4
          .equ	PINC3	=3
          .equ	PINC2	=2
          .equ	PINC1	=1
          .equ	PINC0	=0
         
         ;PORTD
          .equ	PD7	=7
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
         ;DDRD
          .equ	DDD7	=7
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
         ;PIND
          .equ	PIND7	=7
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
         ;UCSRA
          .equ	RXC	=7
          .equ	TXC	=6
          .equ	UDRE	=5
          .equ	FE	=4
          .equ	OR	=3		; old name kept for compatibilty
          .equ	DOR	=3
          .equ	PE	=2
          .equ	U2X	=1
          .equ	MPCM	=0
         
         ;UCSRB
          .equ	RXCIE	=7
          .equ	TXCIE	=6
          .equ	UDRIE	=5
          .equ	RXEN	=4
          .equ	TXEN	=3
          .equ	CHR9	=2		; old name kept for compatibilty
          .equ	UCSZ2	=2
          .equ	RXB8	=1
          .equ	TXB8	=0
         
         ;UCSRC
          .equ	URSEL	=7
          .equ	UMSEL	=6
          .equ	UPM1	=5
          .equ	UPM0	=4
          .equ	USBS	=3
          .equ	UCSZ1	=2
          .equ	UCSZ0	=1
          .equ	UCPOL	=0
         		
         ;SPCR
          .equ	SPIE	=7
          .equ	SPE	=6
          .equ	DORD	=5
          .equ	MSTR	=4
          .equ	CPOL	=3
          .equ	CPHA	=2
          .equ	SPR1	=1
          .equ	SPR0	=0
         
         ;SPSR
          .equ	SPIF	=7
          .equ	WCOL	=6
          .equ	SPI2X	=0
         
         ;ACSR
          .equ	ACD	=7
          .equ    ACBG    =6
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIC	=2
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
         ;ADMUX
          .equ    REFS1   =7
          .equ    REFS0   =6
          .equ    ADLAR   =5
          .equ    MUX4    =4
          .equ    MUX3    =3
          .equ    MUX2    =2
          .equ    MUX1    =1
          .equ    MUX0    =0
         
         ;ADCSR
          .equ    ADEN    =7
          .equ    ADSC    =6
          .equ    ADFR    =5
          .equ    ADIF    =4
          .equ    ADIE    =3
          .equ    ADPS2   =2
          .equ    ADPS1   =1
          .equ    ADPS0   =0
         
         ; TWCR
          .equ    TWINT   =7
          .equ    TWEA    =6
          .equ    TWSTA   =5
          .equ    TWSTO   =4
          .equ    TWWC    =3
          .equ    TWEN    =2
          .equ    TWI_TST =1  ;Present in core test mode only. Write Only.
          .equ    TWIE    =0
         
         ; TWAR
          .equ    TWGCE   =0
         
         ;ASSR
          .equ    AS2     =3
          .equ    TCN2UB  =2
          .equ    OCR2UB  =1
          .equ    TCR2UB  =0
         
          .def	XL	=r26
          .def	XH	=r27
          .def	YL	=r28
          .def	YH	=r29
          .def	ZL	=r30
          .def	ZH	=r31
         
          .equ 	FLASHEND	=$3FFF
          .equ 	E2END	    =$3FF
          .equ	RAMEND	    =$85F
         
         			;  byte groups
         			;  /\/--\/--\/--\ 
          .equ 	SMALLBOOTSTART	=0b11111100000000  ;($3F00) smallest boot block is 256W
          .equ 	SECONDBOOTSTART	=0b11111000000000  ;($3E00) 2'nd boot block size is 512W
          .equ 	THIRDBOOTSTART	=0b11110000000000  ;($3C00) third boot block size is 1KW
          .equ 	LARGEBOOTSTART	=0b11100000000000  ;($3800) largest boot block is 2KW
          .equ 	BOOTSTART	=THIRDBOOTSTART  ;OBSOLETE!!! kept for compatibility
          .equ	PAGESIZE	=64     ;number of WORDS in a page
         
         
          .equ	INT0addr=$002	; External Interrupt0 Vector Address
          .equ	INT1addr=$004	; External Interrupt1 Vector Address
          .equ	INT2addr=$006	; External Interrupt2 Vector Address
          .equ	OC2addr =$008	; Output Compare2 Interrupt Vector Address
          .equ	OVF2addr=$00a	; Overflow2 Interrupt Vector Address
          .equ	ICP1addr=$00c	; Input Capture1 Interrupt Vector Address
          .equ	OC1Aaddr=$00e	; Output Compare1A Interrupt Vector Address
          .equ	OC1Baddr=$010	; Output Compare1B Interrupt Vector Address
          .equ	OVF1addr=$012	; Overflow1 Interrupt Vector Address
          .equ	OC0addr =$014	; Output Compare0 Interrupt Vector Address
          .equ	OVF0addr=$016	; Overflow0 Interrupt Vector Address
          .equ	SPIaddr =$018	; SPI Interrupt Vector Address
          .equ	URXCaddr=$01a	; USART Receive Complete Interrupt Vector Address
          .equ	UDREaddr=$01c	; USART Data Register Empty Interrupt Vector Address
          .equ	UTXCaddr=$01e	; USART Transmit Complete Interrupt Vector Address
          .equ	ADCCaddr=$020	; ADC Interrupt Vector Address
          .equ	ERDYaddr=$022	; EEPROM Interrupt Vector Address
          .equ	ACIaddr =$024	; Analog Comparator Interrupt Vector Address
          .equ    TWSIaddr=$026   ; Irq. vector address for Two-Wire Interface
          .equ	SPMRaddr=$028	; Store Program Memory Ready Interrupt Vector Address
         
         
         
         
         ; for linux usb
         ;.include "C:\PROGRA~1\VMLAB\include\m32def.inc"
         
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
         ; Define interupts
          reset:
000000 940c 003e 	jmp start ; Reset Handler
000002 940c 0028 	jmp EXT_INT0 ; IRQ0 Handler
000004 940c 0029 	jmp EXT_INT1 ; IRQ1 Handler
000006 940c 002a 	jmp EXT_INT2 ; IRQ2 Handler
000008 940c 002b 	jmp TIM2_COMP ; Timer2 Compare Handler
00000a 940c 002c 	jmp TIM2_OVF ; Timer2 Overflow Handler
00000c 940c 002d 	jmp TIM1_CAPT ; Timer1 Capture Handler
00000e 940c 002e 	jmp TIM1_COMPA ; Timer1 CompareA Handler
000010 940c 002f 	jmp TIM1_COMPB ; Timer1 CompareB Handler
000012 940c 0030 	jmp TIM1_OVF ; Timer1 Overflow Handler
000014 940c 003b 	jmp TIM0_COMP ; Timer0 Compare Handler
000016 940c 0031 	jmp TIM0_OVF ; Timer0 Overflow Handler
000018 940c 0032 	jmp SPI_STC ; SPI Transfer Complete Handler
00001a 940c 0033 	jmp USART_RXC ; USART RX Complete Handler
00001c 940c 0034 	jmp USART_UDRE ; UDR Empty Handler
00001e 940c 0035 	jmp USART_TXC ; USART TX Complete Handler
000020 940c 0036 	jmp ADC ; ADC Conversion Complete Handler
000022 940c 0037 	jmp EE_RDY ; EEPROM Ready Handler
000024 940c 0038 	jmp ANA_COMP ; Analog Comparator Handler
000026 940c 0039 	jmp TWI ; Two-wire Serial Interf
         
         ; Define unused interupt reutines
000028 9518      EXT_INT0:   reti ; IRQ0 Handler
000029 9518      EXT_INT1:   reti ; IRQ1 Handler
00002a 9518      EXT_INT2:   reti ; IRQ2 Handler
00002b 9518      TIM2_COMP:	reti ; Timer2 Compare Handler
00002c 9518      TIM2_OVF:	reti ; Timer2 Overflow Handler
00002d 9518      TIM1_CAPT:	reti ; Timer1 Capture Handler
00002e 9518      TIM1_COMPA:	reti ; Timer1 CompareA Handler
00002f 9518      TIM1_COMPB: reti ; Timer1 CompareB Handler
000030 9518      TIM1_OVF:	reti ; Timer1 Overflow Handler
         ;TIM0_COMP:	reti ; Timer0 Compare Handler
000031 9518      TIM0_OVF:	reti ; Timer0 Overflow Handler
000032 9518      SPI_STC:		reti ; SPI Transfer Complete Handler
000033 9518      USART_RXC:	reti ; USART RX Complete Handler
000034 9518      USART_UDRE:	reti ; UDR Empty Handler
000035 9518      USART_TXC:	reti ; USART TX Complete Handler
000036 9518      ADC:			reti ; ADC Conversion Complete Handler
000037 9518      EE_RDY:		reti ; EEPROM Ready Handler
000038 9518      ANA_COMP:	reti ; Analog Comparator Handler
000039 9518      TWI:			reti ; Two-wire Serial Interface Handler
00003a 9518      SPM_RDY:		reti ; Store Program Memory Ready Handler   rjmp start
         
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
         ; This interupt happens when when tcnt0(timer0) and ocr0(timer0 compare) are the same.
          TIM0_COMP:	
         	;see what step we are in
00003b 3041      	cpi CurrentStep, $01 ; if we were in send ping and we got here
00003c f081      	breq SendPing ; We didn't recieve a response, so send another ping
00003d 9518      	reti
         	
         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          start:
          .def  low  = r0
          .def 	high = r1
          .def	temp = r16
          .def 	sig  = r18
          .def  LED  = r19
          .def	CurrentStep = r20
         
         	; initialise stack pointer to the end of the data memory
00003e e50f      	ldi temp, low(RAMEND)
00003f bf0d         out SPL, temp
000040 e008         ldi temp, high(RAMEND)
000041 bf0e         out SPH, temp
         
000042 2400      	clr low	;Load 0b00000000 in low (r0)
000043 ef0f      	ser temp ;Load Ob1111 1111 in temp
000044 2e10      	mov high, temp ;Load Ob1111 1111 in high (r1)
         	
000045 ba17         out DDRB, high	;Configure LEDs on the OUSB to output **Do I need this?
         
          MainLoop:
000046 940e 004d 	call SendPing
000048 940e 0064 	call RecievePing
00004a 940e 006f 	call Display
00004c cff9      	rjmp MainLoop
         
          SendPing: ; this loop sends a ping for 5us then waits for a reply
         ; save what step the loop is in (so timer knows what to do later on)
00004d e041      	ldi CurrentStep, $01
         ; send ping
00004e ba14      	out ddrc, high ; set port C as an output
00004f ba15      	out portc, high ; start outputting ping
000050 0000      	nop
000051 0000      	nop
000052 0000      	nop
000053 0000      	nop ; 1*nop = 1us delay
000054 0000      	nop
000055 0000      	nop
000056 ba05      	out portc, low ; stop outputting ping
000057 ba04      	out ddrc, low ; set portC as an input
         	
         ; wait for response for a maximum of 800us
         	; setup timer
         	; set to interupt when timer0 overflows
000058 e002      	ldi	temp, 0b00000010
000059 bf09      	out 	timsk, temp
         	;enable global interrupts (enables bit 7 of register SREG)
00005a 9478         sei
         	; for timer0, set clock to 8 (1 count = 8us), set to interupt on a compare
00005b e102      	ldi	temp, 0b00010010
00005c bf03      	out	tccr0, temp
         	; set the register that the timer0 compares against to $64 (count 100 = 800us)
00005d e604      	ldi	temp, $64
00005e bf0c      	out	ocr0, temp
00005f c000      	rjmp forever1 ; loop at forever until 800us occurs or start receiving ping response
         
          forever1: ; keep checking for a response until 800us has passed
000060 b305      	in temp, portc
000061 1500      	cp	temp, r0 ; Watch PortC until we recieve a response
000062 f409      	brne RecievePing ; when we recieve a response jump to RecievePing
000063 cffc      	rjmp forever1	
         
          RecievePing:
         	; this loop does...........
         ; save what step the loop is in (so timer knows what to do later on)
000064 e042      	ldi CurrentStep, $02
         
          forever:
000065 ba04         out DDRC, low	;Configure all pins on PortC as outputs for tOut
000066 ba05         out PORTC, low	;Writes all 0's to the pins of PortC
000067 0000         NOP				;Delay to let the port settle
000068 ba15         out PORTC, high;Writes all 1's to the pins of PortC to set off the pulse (tOut)
            ;Delay 5uS
000069 ba05         out PORTC, low ;tHoldOff
00006a ba14         out DDRC, high	;Configure all pins on PORTC as Inputs for tInx
            ;Delay 750uS
00006b b323         in	 sig, PINC	;Sets sig to the returning signal
         
         
         
00006c 940c 006f 	JMP Display		;Display the distance on the LEDs
         
00006e cff6      rjmp forever
         
          Display:
00006f 940c 0073    JMP CalcLEDs	;Calculate the number of LEDs to light up
000071 bb38         out PORTB, LED ;
000072 9508      	ret
         
          calcLEDs:
         	;some kind of if statment for distance (idk how distance is returned)
         	;LED Increment Numbers:
         	;0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF
000073 9508      	ret
         	
         	
         ;*************************************
         ; Example from lab3
         ;
         ; Delay routine
         ; Input: none
         ; outputs: none
         ; uses: nothing (saves registers and restores)
         ;
         ; this has an inner loop and an outer loop.  The delay is approximately
         ; equal to 256*256*number of inner loop instruction cycles (4) (~21mS)
         ; You can vary this by changing the initial values in the registers.
         ; If you need a much longer delay change one of the loop counters
         ; to a 16-bit register such as X or Y.
         ;
         ;*************************************
000074 9508      Delay:   ret
000075 930f               PUSH R16			; save R16 and 17 as we're going to use them
000076 931f               PUSH R17       ; as loop counters
000077 920f               PUSH R0        ; we'll also use R0 as a zero value for compare
000078 2400               CLR R0
000079 2700               CLR R16        ; init inner counter
00007a 2711               CLR R17        ; and outer counter
00007b 950a      L1:      DEC R16         ; counts down from 0 to FF to 0
00007c 1100      			CPSE R16, R0    ; equal to zero?
00007d cffd      			RJMP L1			 ; if not, do it again
00007e 2700      			CLR R16			 ; reinit inner counter
00007f 951a      L2:      DEC R17
000080 1110               CPSE R17, R0    ; is it zero yet?
000081 cff9               RJMP L1			 ; back to inner counter
         ;
000082 900f               POP R0          ; done, clean up and return
000083 911f               POP R17
000084 910f               POP R16
000085 9508               RET
         ;*************************************
         
         
         
         ;References and helpful links:
         ;
         ;PING Sensor documentation:
         ;https://www.parallax.com/sites/default/files/downloads/28015-PING-Sensor-Product-Guide-v2.0.pdf
         ;
         ;setting I/O via DDRx:
         ;http://www.avr-tutorials.com/digital/digital-input-output-assembly-programming-atmel-8-bits-avr-microcontrollers
         
         

Assembly complete with no errors.
